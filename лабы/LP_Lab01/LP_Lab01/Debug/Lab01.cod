; Listing generated by Microsoft (R) Optimizing Compiler Version 19.24.28316.0 

	TITLE	C:\Users\User\Documents\ßÏ\LP_Lab01\LP_Lab01\Lab01.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__BD3EDE1B_vcruntime_new@h DB 01H
__09340588_corecrt_math@h DB 01H
__24E9E95F_stdlib@h DB 01H
__EC2FBCF1_cstdlib DB 01H
__C0436A37_cmath DB 01H
__F66CEB67_corecrt_stdio_config@h DB 01H
__101834BA_corecrt_wstdio@h DB 01H
__AD6A91B7_stdio@h DB 01H
__4877352E_type_traits DB 01H
__B0C4CEA9_malloc@h DB 01H
__CFCEF810_vcruntime_exception@h DB 01H
__CB7CF65A_exception DB 01H
__367CC694_corecrt_memcpy_s@h DB 01H
__35D7DDB3_corecrt_memory@h DB 01H
__DC9673E3_corecrt_wstring@h DB 01H
__A29A7DFB_string@h DB 01H
__5467428D_corecrt_wconio@h DB 01H
__4442441F_corecrt_wio@h DB 01H
__45F4AF76_corecrt_wtime@h DB 01H
__186FF47F_stat@h DB 01H
__534C724A_wchar@h DB 01H
__CDF80030_limits DB 01H
__45864D8F_xutility DB 01H
__B1B75AB9_xmemory DB 01H
__C564DC25_xstring DB 01H
__4232CC07_stdexcept DB 01H
__34C7AB85_xcall_once@h DB 01H
__8B9AB9A5_system_error DB 01H
__60622685_vcruntime_typeinfo@h DB 01H
__3559BE96_typeinfo DB 01H
__71560CBE_memory DB 01H
__5D135BB1_xfacet DB 01H
__7242C389_ctype@h DB 01H
__2AD05D5E_xlocinfo DB 01H
__1A5AA814_xlocale DB 01H
__13352A4D_xiosbase DB 01H
__84DDCE03_xlocnum DB 01H
__735DEEF4_ios DB 01H
__E915E780_conio@h DB 01H
__C6F64F3D_Lab01@cpp DB 01H
__6A9A47EA_istream DB 01H
__094A72D0_ostream DB 01H
__409274BB_streambuf DB 01H
__0111D5B6_iosfwd DB 01H
__DB22397A_utility DB 01H
__C1707A8C_xatomic@h DB 01H
__2C3DAE68_xstddef DB 01H
msvcjmc	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z	; std::_Narrow_char_traits<char,int>::length
PUBLIC	?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
PUBLIC	?eof@?$_Narrow_char_traits@DH@std@@SAHXZ	; std::_Narrow_char_traits<char,int>::eof
PUBLIC	?ifleap@@YA_NH@Z				; ifleap
PUBLIC	?correct@@YA_NH@Z				; correct
PUBLIC	??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
PUBLIC	??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
PUBLIC	?countDays@@YAHH@Z				; countDays
PUBLIC	_main
PUBLIC	??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
PUBLIC	??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
PUBLIC	??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
PUBLIC	??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
PUBLIC	??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_0CD@GCNIAHMP@?d?$OA?m?m?$PL?e?5?b?b?e?d?e?m?$PL?5?m?e?5?q?n?c?k?$OA?q?m?n?5?t?n?p?l@ ; `string'
PUBLIC	??_C@_0BF@MMGGFLJJ@?l?e?q?$PP?v?5?b?b?e?d?e?m?5?m?e?b?e?p?m?n@ ; `string'
PUBLIC	??_C@_0CE@JEGLBJDM@?d?e?m?$PM?5?b?b?e?d?e?m?5?m?e?b?e?p?m?n?0?5?c?n?d?5?b?h?q?n?j?n@ ; `string'
PUBLIC	??_C@_0DB@CHKHDBKP@?d?e?m?$PM?5?b?b?e?d?e?m?5?m?e?b?e?p?m?n?0?5?b?5?d?$OA?m?m?n?l?5?l@ ; `string'
PUBLIC	??_C@_05IBDPBKGM@?5?c?n?d?s@			; `string'
PUBLIC	??_C@_08HFMLPBIL@?5?d?e?m?$PM?5?b?5@		; `string'
PUBLIC	??_C@_04FCCPLECO@?$NN?r?n?5@			; `string'
PUBLIC	??_C@_0P@CHIFFIAL@?c?n?d?5?b?h?q?n?j?n?q?m?$PL?i@ ; `string'
PUBLIC	??_C@_0BC@DJFNDCHH@?c?n?d?5?m?e?5?b?h?q?n?j?n?q?m?$PL?i@ ; `string'
PUBLIC	??_C@_03OJJHGHEE@Rus@				; `string'
PUBLIC	??_C@_0CA@DCOGFNOO@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?b?5?t?n?p?l?$OA?r?e?5?D?D?L?L?C?C?C?C@ ; `string'
PUBLIC	??_C@_0CC@COLAOLNA@?N?x?h?a?j?$OA?5?b?b?n?d?$OA?4?B?b?e?d?h?r?e?5?r?n?k?$PM?j?n?5?w?h?q@ ; `string'
PUBLIC	??_C@_0BE@IEJKMFME@?5?o?n?o?p?n?a?s?i?r?e?5?e?y?e?5?p?$OA?g@ ; `string'
EXTRN	?uncaught_exception@std@@YA_NXZ:PROC		; std::uncaught_exception
EXTRN	_strlen:PROC
EXTRN	__imp__setlocale:PROC
EXTRN	__imp_?good@ios_base@std@@QBE_NXZ:PROC
EXTRN	__imp_?fail@ios_base@std@@QBE_NXZ:PROC
EXTRN	__imp_?flags@ios_base@std@@QBEHXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QBE_JXZ:PROC
EXTRN	__imp_?width@ios_base@std@@QAE_J_J@Z:PROC
EXTRN	__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z:PROC
EXTRN	__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z:PROC
EXTRN	__imp_?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:PROC
EXTRN	__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z:PROC
EXTRN	__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ:PROC
EXTRN	__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ:PROC
EXTRN	__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z:PROC
EXTRN	__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z:PROC
EXTRN	__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z:PROC
EXTRN	__imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z:PROC
EXTRN	__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ:PROC
EXTRN	__imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z:PROC
EXTRN	__imp_?ignore@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z:PROC
EXTRN	__imp___getch:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A:BYTE
EXTRN	___security_cookie:DWORD
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0BE@IEJKMFME@?5?o?n?o?p?n?a?s?i?r?e?5?e?y?e?5?p?$OA?g@
CONST	SEGMENT
??_C@_0BE@IEJKMFME@?5?o?n?o?p?n?a?s?i?r?e?5?e?y?e?5?p?$OA?g@ DB ' ', 0efH
	DB	0eeH, 0efH, 0f0H, 0eeH, 0e1H, 0f3H, 0e9H, 0f2H, 0e5H, ' ', 0e5H
	DB	0f9H, 0e5H, ' ', 0f0H, 0e0H, 0e7H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@COLAOLNA@?N?x?h?a?j?$OA?5?b?b?n?d?$OA?4?B?b?e?d?h?r?e?5?r?n?k?$PM?j?n?5?w?h?q@
CONST	SEGMENT
??_C@_0CC@COLAOLNA@?N?x?h?a?j?$OA?5?b?b?n?d?$OA?4?B?b?e?d?h?r?e?5?r?n?k?$PM?j?n?5?w?h?q@ DB 0ceH
	DB	0f8H, 0e8H, 0e1H, 0eaH, 0e0H, ' ', 0e2H, 0e2H, 0eeH, 0e4H, 0e0H
	DB	'.', 0c2H, 0e2H, 0e5H, 0e4H, 0e8H, 0f2H, 0e5H, ' ', 0f2H, 0eeH
	DB	0ebH, 0fcH, 0eaH, 0eeH, ' ', 0f7H, 0e8H, 0f1H, 0ebH, 0e0H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@DCOGFNOO@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?b?5?t?n?p?l?$OA?r?e?5?D?D?L?L?C?C?C?C@
CONST	SEGMENT
??_C@_0CA@DCOGFNOO@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?b?5?t?n?p?l?$OA?r?e?5?D?D?L?L?C?C?C?C@ DB 0c2H
	DB	0e2H, 0e5H, 0e4H, 0e8H, 0f2H, 0e5H, ' ', 0e4H, 0e0H, 0f2H, 0f3H
	DB	' ', 0e2H, ' ', 0f4H, 0eeH, 0f0H, 0ecH, 0e0H, 0f2H, 0e5H, ' ', 0c4H
	DB	0c4H, 0ccH, 0ccH, 0c3H, 0c3H, 0c3H, 0c3H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03OJJHGHEE@Rus@
CONST	SEGMENT
??_C@_03OJJHGHEE@Rus@ DB 'Rus', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DJFNDCHH@?c?n?d?5?m?e?5?b?h?q?n?j?n?q?m?$PL?i@
CONST	SEGMENT
??_C@_0BC@DJFNDCHH@?c?n?d?5?m?e?5?b?h?q?n?j?n?q?m?$PL?i@ DB 0e3H, 0eeH, 0e4H
	DB	' ', 0edH, 0e5H, ' ', 0e2H, 0e8H, 0f1H, 0eeH, 0eaH, 0eeH, 0f1H
	DB	0edH, 0fbH, 0e9H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CHIFFIAL@?c?n?d?5?b?h?q?n?j?n?q?m?$PL?i@
CONST	SEGMENT
??_C@_0P@CHIFFIAL@?c?n?d?5?b?h?q?n?j?n?q?m?$PL?i@ DB 0e3H, 0eeH, 0e4H, ' '
	DB	0e2H, 0e8H, 0f1H, 0eeH, 0eaH, 0eeH, 0f1H, 0edH, 0fbH, 0e9H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04FCCPLECO@?$NN?r?n?5@
CONST	SEGMENT
??_C@_04FCCPLECO@?$NN?r?n?5@ DB 0ddH, 0f2H, 0eeH, ' ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08HFMLPBIL@?5?d?e?m?$PM?5?b?5@
CONST	SEGMENT
??_C@_08HFMLPBIL@?5?d?e?m?$PM?5?b?5@ DB ' ', 0e4H, 0e5H, 0edH, 0fcH, ' ', 0e2H
	DB	' ', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_05IBDPBKGM@?5?c?n?d?s@
CONST	SEGMENT
??_C@_05IBDPBKGM@?5?c?n?d?s@ DB ' ', 0e3H, 0eeH, 0e4H, 0f3H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@CHKHDBKP@?d?e?m?$PM?5?b?b?e?d?e?m?5?m?e?b?e?p?m?n?0?5?b?5?d?$OA?m?m?n?l?5?l@
CONST	SEGMENT
??_C@_0DB@CHKHDBKP@?d?e?m?$PM?5?b?b?e?d?e?m?5?m?e?b?e?p?m?n?0?5?b?5?d?$OA?m?m?n?l?5?l@ DB 0e4H
	DB	0e5H, 0edH, 0fcH, ' ', 0e2H, 0e2H, 0e5H, 0e4H, 0e5H, 0edH, ' ', 0edH
	DB	0e5H, 0e2H, 0e5H, 0f0H, 0edH, 0eeH, ', ', 0e2H, ' ', 0e4H, 0e0H
	DB	0edH, 0edH, 0eeH, 0ecH, ' ', 0ecH, 0e5H, 0f1H, 0ffH, 0f6H, 0e5H
	DB	' ', 0ecH, 0e5H, 0edH, 0fcH, 0f8H, 0e5H, ' ', 0e4H, 0edH, 0e5H
	DB	0e9H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@JEGLBJDM@?d?e?m?$PM?5?b?b?e?d?e?m?5?m?e?b?e?p?m?n?0?5?c?n?d?5?b?h?q?n?j?n@
CONST	SEGMENT
??_C@_0CE@JEGLBJDM@?d?e?m?$PM?5?b?b?e?d?e?m?5?m?e?b?e?p?m?n?0?5?c?n?d?5?b?h?q?n?j?n@ DB 0e4H
	DB	0e5H, 0edH, 0fcH, ' ', 0e2H, 0e2H, 0e5H, 0e4H, 0e5H, 0edH, ' ', 0edH
	DB	0e5H, 0e2H, 0e5H, 0f0H, 0edH, 0eeH, ', ', 0e3H, 0eeH, 0e4H, ' '
	DB	0e2H, 0e8H, 0f1H, 0eeH, 0eaH, 0eeH, 0f1H, 0edH, 0fbH, 0e9H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MMGGFLJJ@?l?e?q?$PP?v?5?b?b?e?d?e?m?5?m?e?b?e?p?m?n@
CONST	SEGMENT
??_C@_0BF@MMGGFLJJ@?l?e?q?$PP?v?5?b?b?e?d?e?m?5?m?e?b?e?p?m?n@ DB 0ecH, 0e5H
	DB	0f1H, 0ffH, 0f6H, ' ', 0e2H, 0e2H, 0e5H, 0e4H, 0e5H, 0edH, ' ', 0edH
	DB	0e5H, 0e2H, 0e5H, 0f0H, 0edH, 0eeH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@GCNIAHMP@?d?$OA?m?m?$PL?e?5?b?b?e?d?e?m?$PL?5?m?e?5?q?n?c?k?$OA?q?m?n?5?t?n?p?l@
CONST	SEGMENT
??_C@_0CD@GCNIAHMP@?d?$OA?m?m?$PL?e?5?b?b?e?d?e?m?$PL?5?m?e?5?q?n?c?k?$OA?q?m?n?5?t?n?p?l@ DB 0e4H
	DB	0e0H, 0edH, 0edH, 0fbH, 0e5H, ' ', 0e2H, 0e2H, 0e5H, 0e4H, 0e5H
	DB	0edH, 0fbH, ' ', 0edH, 0e5H, ' ', 0f1H, 0eeH, 0e3H, 0ebH, 0e0H
	DB	0f1H, 0edH, 0eeH, ' ', 0f4H, 0eeH, 0f0H, 0ecH, 0e0H, 0f2H, 0f3H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
__ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0
__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$3
__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.24.28314\include\ostream
;	COMDAT ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool, COMDAT
; _this$ = ecx

; 121  :         explicit __CLR_OR_THIS_CALL operator bool() const {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __094A72D0_ostream
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 122  :             return _Ok;

  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8a 40 04	 mov	 al, BYTE PTR [eax+4]

; 123  :         }

  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003c	3b ec		 cmp	 ebp, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.24.28314\include\ostream
;	COMDAT ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry, COMDAT
; _this$ = ecx

; 110  :         __CLR_OR_THIS_CALL ~sentry() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	b9 00 00 00 00	 mov	 ecx, OFFSET __094A72D0_ostream
  00047	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 111  : #if _HAS_EXCEPTIONS
; 112  :             if (!_STD uncaught_exception()) { // TRANSITION, OS#15518458

  0004c	e8 00 00 00 00	 call	 ?uncaught_exception@std@@YA_NXZ ; std::uncaught_exception
  00051	0f b6 c0	 movzx	 eax, al
  00054	85 c0		 test	 eax, eax
  00056	75 14		 jne	 SHORT $LN1@sentry

; 113  :                 this->_Myostr._Osfx();

  00058	8b f4		 mov	 esi, esp
  0005a	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0005d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00065	3b f4		 cmp	 esi, esp
  00067	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@sentry:

; 114  :             }
; 115  : #else // _HAS_EXCEPTIONS
; 116  :             this->_Myostr._Osfx();
; 117  : #endif // _HAS_EXCEPTIONS
; 118  :         }

  0006c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0006f	e8 00 00 00 00	 call	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
  00074	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00077	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0007e	59		 pop	 ecx
  0007f	5f		 pop	 edi
  00080	5e		 pop	 esi
  00081	5b		 pop	 ebx
  00082	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00088	3b ec		 cmp	 ebp, esp
  0008a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008f	8b e5		 mov	 esp, ebp
  00091	5d		 pop	 ebp
  00092	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.24.28314\include\ostream
;	COMDAT ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
__Tied$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
__Ostr$ = 8						; size = 4
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry, COMDAT
; _this$ = ecx

; 92   :         explicit __CLR_OR_THIS_CALL sentry(basic_ostream& _Ostr) : _Sentry_base(_Ostr) {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00021	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	b9 00 00 00 00	 mov	 ecx, OFFSET __094A72D0_ostream
  00047	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0004c	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0004f	50		 push	 eax
  00050	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	e8 00 00 00 00	 call	 ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
  00058	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 93   :             if (!_Ostr.good()) {

  0005f	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00062	8b 08		 mov	 ecx, DWORD PTR [eax]
  00064	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00067	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0006a	8b f4		 mov	 esi, esp
  0006c	8b ca		 mov	 ecx, edx
  0006e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  00074	3b f4		 cmp	 esi, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	0f b6 c0	 movzx	 eax, al
  0007e	85 c0		 test	 eax, eax
  00080	75 09		 jne	 SHORT $LN2@sentry

; 94   :                 _Ok = false;

  00082	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00085	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0

; 95   :                 return;

  00089	eb 6a		 jmp	 SHORT $LN1@sentry
$LN2@sentry:

; 96   :             }
; 97   : 
; 98   :             const auto _Tied = _Ostr.tie();

  0008b	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0008e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00090	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00093	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00096	8b f4		 mov	 esi, esp
  00098	8b ca		 mov	 ecx, edx
  0009a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ
  000a0	3b f4		 cmp	 esi, esp
  000a2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a7	89 45 e0	 mov	 DWORD PTR __Tied$[ebp], eax

; 99   :             if (!_Tied || _Tied == &_Ostr) {

  000aa	83 7d e0 00	 cmp	 DWORD PTR __Tied$[ebp], 0
  000ae	74 08		 je	 SHORT $LN4@sentry
  000b0	8b 45 e0	 mov	 eax, DWORD PTR __Tied$[ebp]
  000b3	3b 45 08	 cmp	 eax, DWORD PTR __Ostr$[ebp]
  000b6	75 09		 jne	 SHORT $LN3@sentry
$LN4@sentry:

; 100  :                 _Ok = true;

  000b8	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000bb	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1

; 101  :                 return;

  000bf	eb 34		 jmp	 SHORT $LN1@sentry
$LN3@sentry:

; 102  :             }
; 103  : 
; 104  : 
; 105  :             _Tied->flush();

  000c1	8b f4		 mov	 esi, esp
  000c3	8b 4d e0	 mov	 ecx, DWORD PTR __Tied$[ebp]
  000c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  000cc	3b f4		 cmp	 esi, esp
  000ce	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 106  :             _Ok = _Ostr.good(); // store test only after flushing tie

  000d3	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000d6	8b 08		 mov	 ecx, DWORD PTR [eax]
  000d8	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000db	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000de	8b f4		 mov	 esi, esp
  000e0	8b ca		 mov	 ecx, edx
  000e2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?good@ios_base@std@@QBE_NXZ
  000e8	3b f4		 cmp	 esi, esp
  000ea	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ef	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000f2	88 41 04	 mov	 BYTE PTR [ecx+4], al
$LN1@sentry:

; 107  :         }

  000f5	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000fc	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000ff	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00102	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00109	59		 pop	 ecx
  0010a	5f		 pop	 edi
  0010b	5e		 pop	 esi
  0010c	5b		 pop	 ebx
  0010d	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  00113	3b ec		 cmp	 ebp, esp
  00115	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0011a	8b e5		 mov	 esp, ebp
  0011c	5d		 pop	 ebp
  0011d	c2 04 00	 ret	 4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  00021	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.24.28314\include\ostream
;	COMDAT ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
tv72 = -232						; size = 4
__Rdbuf$ = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base, COMDAT
; _this$ = ecx

; 78   :         __CLR_OR_THIS_CALL ~_Sentry_base() noexcept { // destroy after unlocking

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00021	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	b9 00 00 00 00	 mov	 ecx, OFFSET __094A72D0_ostream
  00047	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 79   :             const auto _Rdbuf = _Myostr.rdbuf();

  0004c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00051	89 8d 18 ff ff
	ff		 mov	 DWORD PTR tv72[ebp], ecx
  00057	8b 95 18 ff ff
	ff		 mov	 edx, DWORD PTR tv72[ebp]
  0005d	8b 02		 mov	 eax, DWORD PTR [edx]
  0005f	8b 8d 18 ff ff
	ff		 mov	 ecx, DWORD PTR tv72[ebp]
  00065	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00068	8b f4		 mov	 esi, esp
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00070	3b f4		 cmp	 esi, esp
  00072	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00077	89 45 e0	 mov	 DWORD PTR __Rdbuf$[ebp], eax

; 80   :             if (_Rdbuf) {

  0007a	83 7d e0 00	 cmp	 DWORD PTR __Rdbuf$[ebp], 0
  0007e	74 16		 je	 SHORT $LN3@Sentry_bas

; 81   :                 _Rdbuf->_Unlock();

  00080	8b 45 e0	 mov	 eax, DWORD PTR __Rdbuf$[ebp]
  00083	8b 10		 mov	 edx, DWORD PTR [eax]
  00085	8b f4		 mov	 esi, esp
  00087	8b 4d e0	 mov	 ecx, DWORD PTR __Rdbuf$[ebp]
  0008a	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0008d	ff d0		 call	 eax
  0008f	3b f4		 cmp	 esi, esp
  00091	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@Sentry_bas:

; 82   :             }
; 83   :         }

  00096	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00099	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a0	59		 pop	 ecx
  000a1	5f		 pop	 edi
  000a2	5e		 pop	 esi
  000a3	5b		 pop	 ebx
  000a4	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  000aa	3b ec		 cmp	 ebp, esp
  000ac	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b1	8b e5		 mov	 esp, ebp
  000b3	5d		 pop	 ebp
  000b4	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 14 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-236]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::~_Sentry_base
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.24.28314\include\ostream
;	COMDAT ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
_TEXT	SEGMENT
tv73 = -220						; size = 4
__Rdbuf$ = -20						; size = 4
_this$ = -8						; size = 4
__Ostr$ = 8						; size = 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z PROC ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base, COMDAT
; _this$ = ecx

; 71   :         __CLR_OR_THIS_CALL _Sentry_base(basic_ostream& _Ostr) : _Myostr(_Ostr) { // lock the stream buffer, if there

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 24 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-220]
  00013	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __094A72D0_ostream
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00033	89 08		 mov	 DWORD PTR [eax], ecx

; 72   :             const auto _Rdbuf = _Myostr.rdbuf();

  00035	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00038	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003a	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv73[ebp], ecx
  00040	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR tv73[ebp]
  00046	8b 02		 mov	 eax, DWORD PTR [edx]
  00048	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv73[ebp]
  0004e	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  00051	8b f4		 mov	 esi, esp
  00053	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  00059	3b f4		 cmp	 esi, esp
  0005b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00060	89 45 ec	 mov	 DWORD PTR __Rdbuf$[ebp], eax

; 73   :             if (_Rdbuf) {

  00063	83 7d ec 00	 cmp	 DWORD PTR __Rdbuf$[ebp], 0
  00067	74 16		 je	 SHORT $LN1@Sentry_bas

; 74   :                 _Rdbuf->_Lock();

  00069	8b 45 ec	 mov	 eax, DWORD PTR __Rdbuf$[ebp]
  0006c	8b 10		 mov	 edx, DWORD PTR [eax]
  0006e	8b f4		 mov	 esi, esp
  00070	8b 4d ec	 mov	 ecx, DWORD PTR __Rdbuf$[ebp]
  00073	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00076	ff d0		 call	 eax
  00078	3b f4		 cmp	 esi, esp
  0007a	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN1@Sentry_bas:

; 75   :             }
; 76   :         }

  0007f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00082	5f		 pop	 edi
  00083	5e		 pop	 esi
  00084	5b		 pop	 ebx
  00085	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  0008b	3b ec		 cmp	 ebp, esp
  0008d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c2 04 00	 ret	 4
??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ENDP ; std::basic_ostream<char,std::char_traits<char> >::_Sentry_base::_Sentry_base
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\User\Documents\ßÏ\LP_Lab01\LP_Lab01\Lab01.cpp
;	COMDAT _main
_TEXT	SEGMENT
_date$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_main	PROC						; COMDAT

; 44   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00012	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __C6F64F3D_Lab01@cpp
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 45   : 	setlocale(LC_ALL, "Rus");

  00032	8b f4		 mov	 esi, esp
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_03OJJHGHEE@Rus@
  00039	6a 00		 push	 0
  0003b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__setlocale
  00041	83 c4 08	 add	 esp, 8
  00044	3b f4		 cmp	 esi, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
$tryAgain$9:

; 46   : 	int date;
; 47   : 	tryAgain:cout << "Ââåäèòå äàòó â ôîðìàòå ÄÄÌÌÃÃÃÃ" << endl;

  0004b	8b f4		 mov	 esi, esp
  0004d	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@DCOGFNOO@?B?b?e?d?h?r?e?5?d?$OA?r?s?5?b?5?t?n?p?l?$OA?r?e?5?D?D?L?L?C?C?C?C@
  00057	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0005c	50		 push	 eax
  0005d	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00062	83 c4 08	 add	 esp, 8
  00065	8b c8		 mov	 ecx, eax
  00067	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0006d	3b f4		 cmp	 esi, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 48   : 	cin >> date;

  00074	8b f4		 mov	 esi, esp
  00076	8d 45 f4	 lea	 eax, DWORD PTR _date$[ebp]
  00079	50		 push	 eax
  0007a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
  00080	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??5?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV01@AAH@Z
  00086	3b f4		 cmp	 esi, esp
  00088	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 49   : 	if (cin.fail()) {

  0008d	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
  00092	8b 08		 mov	 ecx, DWORD PTR [eax]
  00094	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
  0009a	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0009d	8b f4		 mov	 esi, esp
  0009f	8b ca		 mov	 ecx, edx
  000a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fail@ios_base@std@@QBE_NXZ
  000a7	3b f4		 cmp	 esi, esp
  000a9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ae	0f b6 c0	 movzx	 eax, al
  000b1	85 c0		 test	 eax, eax
  000b3	74 5b		 je	 SHORT $LN2@main

; 50   : 		cin.clear();

  000b5	8b f4		 mov	 esi, esp
  000b7	6a 00		 push	 0
  000b9	6a 00		 push	 0
  000bb	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
  000c0	8b 08		 mov	 ecx, DWORD PTR [eax]
  000c2	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
  000c8	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000cb	8b ca		 mov	 ecx, edx
  000cd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  000d3	3b f4		 cmp	 esi, esp
  000d5	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 51   : 		cin.ignore(2147483647, '\n');

  000da	8b f4		 mov	 esi, esp
  000dc	6a 0a		 push	 10			; 0000000aH
  000de	6a 00		 push	 0
  000e0	68 ff ff ff 7f	 push	 2147483647		; 7fffffffH
  000e5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR __imp_?cin@std@@3V?$basic_istream@DU?$char_traits@D@std@@@1@A
  000eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?ignore@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@_JH@Z
  000f1	3b f4		 cmp	 esi, esp
  000f3	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 52   : 		cout << "Îøèáêà ââîäà.Ââåäèòå òîëüêî ÷èñëà";

  000f8	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@COLAOLNA@?N?x?h?a?j?$OA?5?b?b?n?d?$OA?4?B?b?e?d?h?r?e?5?r?n?k?$PM?j?n?5?w?h?q@
  000fd	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00102	50		 push	 eax
  00103	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00108	83 c4 08	 add	 esp, 8

; 53   : 		goto tryAgain;

  0010b	e9 3b ff ff ff	 jmp	 $tryAgain$9
$LN2@main:

; 54   : 
; 55   : 	}
; 56   : 	if (correct(date) == false) { cout << " ïîïðîáóéòå åùå ðàç" << endl; goto tryAgain; }

  00110	8b 45 f4	 mov	 eax, DWORD PTR _date$[ebp]
  00113	50		 push	 eax
  00114	e8 00 00 00 00	 call	 ?correct@@YA_NH@Z	; correct
  00119	83 c4 04	 add	 esp, 4
  0011c	0f b6 c8	 movzx	 ecx, al
  0011f	85 c9		 test	 ecx, ecx
  00121	75 2e		 jne	 SHORT $LN3@main
  00123	8b f4		 mov	 esi, esp
  00125	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0012a	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@IEJKMFME@?5?o?n?o?p?n?a?s?i?r?e?5?e?y?e?5?p?$OA?g@
  0012f	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00134	50		 push	 eax
  00135	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0013a	83 c4 08	 add	 esp, 8
  0013d	8b c8		 mov	 ecx, eax
  0013f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00145	3b f4		 cmp	 esi, esp
  00147	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0014c	e9 fa fe ff ff	 jmp	 $tryAgain$9
$LN3@main:

; 57   : 
; 58   : 
; 59   : 
; 60   : 	countDays(date);

  00151	8b 45 f4	 mov	 eax, DWORD PTR _date$[ebp]
  00154	50		 push	 eax
  00155	e8 00 00 00 00	 call	 ?countDays@@YAHH@Z	; countDays
  0015a	83 c4 04	 add	 esp, 4

; 61   : 	_getch();

  0015d	8b f4		 mov	 esi, esp
  0015f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___getch
  00165	3b f4		 cmp	 esi, esp
  00167	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 62   : }

  0016c	33 c0		 xor	 eax, eax
  0016e	52		 push	 edx
  0016f	8b cd		 mov	 ecx, ebp
  00171	50		 push	 eax
  00172	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@main
  00178	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0017d	58		 pop	 eax
  0017e	5a		 pop	 edx
  0017f	5f		 pop	 edi
  00180	5e		 pop	 esi
  00181	5b		 pop	 ebx
  00182	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00185	33 cd		 xor	 ecx, ebp
  00187	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0018c	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  00192	3b ec		 cmp	 ebp, esp
  00194	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00199	8b e5		 mov	 esp, ebp
  0019b	5d		 pop	 ebp
  0019c	c3		 ret	 0
  0019d	0f 1f 00	 npad	 3
$LN8@main:
  001a0	01 00 00 00	 DD	 1
  001a4	00 00 00 00	 DD	 $LN7@main
$LN7@main:
  001a8	f4 ff ff ff	 DD	 -12			; fffffff4H
  001ac	04 00 00 00	 DD	 4
  001b0	00 00 00 00	 DD	 $LN6@main
$LN6@main:
  001b4	64		 DB	 100			; 00000064H
  001b5	61		 DB	 97			; 00000061H
  001b6	74		 DB	 116			; 00000074H
  001b7	65		 DB	 101			; 00000065H
  001b8	00		 DB	 0
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\User\Documents\ßÏ\LP_Lab01\LP_Lab01\Lab01.cpp
;	COMDAT ?countDays@@YAHH@Z
_TEXT	SEGMENT
_i$1 = -92						; size = 4
_amount$ = -80						; size = 48
_day$ = -24						; size = 4
_month$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_date$ = 8						; size = 4
?countDays@@YAHH@Z PROC					; countDays, COMDAT

; 24   : {                      

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 20 01 00
	00		 sub	 esp, 288		; 00000120H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd e0 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-288]
  00012	b9 48 00 00 00	 mov	 ecx, 72			; 00000048H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __C6F64F3D_Lab01@cpp
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 25   : 	int month, day, amount[12] = {31,28,31,30,31,30,31,31,30,31,30};

  00032	c7 45 b0 1f 00
	00 00		 mov	 DWORD PTR _amount$[ebp], 31 ; 0000001fH
  00039	c7 45 b4 1c 00
	00 00		 mov	 DWORD PTR _amount$[ebp+4], 28 ; 0000001cH
  00040	c7 45 b8 1f 00
	00 00		 mov	 DWORD PTR _amount$[ebp+8], 31 ; 0000001fH
  00047	c7 45 bc 1e 00
	00 00		 mov	 DWORD PTR _amount$[ebp+12], 30 ; 0000001eH
  0004e	c7 45 c0 1f 00
	00 00		 mov	 DWORD PTR _amount$[ebp+16], 31 ; 0000001fH
  00055	c7 45 c4 1e 00
	00 00		 mov	 DWORD PTR _amount$[ebp+20], 30 ; 0000001eH
  0005c	c7 45 c8 1f 00
	00 00		 mov	 DWORD PTR _amount$[ebp+24], 31 ; 0000001fH
  00063	c7 45 cc 1f 00
	00 00		 mov	 DWORD PTR _amount$[ebp+28], 31 ; 0000001fH
  0006a	c7 45 d0 1e 00
	00 00		 mov	 DWORD PTR _amount$[ebp+32], 30 ; 0000001eH
  00071	c7 45 d4 1f 00
	00 00		 mov	 DWORD PTR _amount$[ebp+36], 31 ; 0000001fH
  00078	c7 45 d8 1e 00
	00 00		 mov	 DWORD PTR _amount$[ebp+40], 30 ; 0000001eH
  0007f	33 c0		 xor	 eax, eax
  00081	89 45 dc	 mov	 DWORD PTR _amount$[ebp+44], eax

; 26   : 	month = (date / 10000) % 100;

  00084	8b 45 08	 mov	 eax, DWORD PTR _date$[ebp]
  00087	99		 cdq
  00088	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  0008d	f7 f9		 idiv	 ecx
  0008f	99		 cdq
  00090	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  00095	f7 f9		 idiv	 ecx
  00097	89 55 f4	 mov	 DWORD PTR _month$[ebp], edx

; 27   : 	day = date / 1000000;

  0009a	8b 45 08	 mov	 eax, DWORD PTR _date$[ebp]
  0009d	99		 cdq
  0009e	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  000a3	f7 f9		 idiv	 ecx
  000a5	89 45 e8	 mov	 DWORD PTR _day$[ebp], eax

; 28   : 	for (int i = 0; i < 12; i++)

  000a8	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  000af	eb 09		 jmp	 SHORT $LN4@countDays
$LN2@countDays:
  000b1	8b 45 a4	 mov	 eax, DWORD PTR _i$1[ebp]
  000b4	83 c0 01	 add	 eax, 1
  000b7	89 45 a4	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@countDays:
  000ba	83 7d a4 0c	 cmp	 DWORD PTR _i$1[ebp], 12	; 0000000cH
  000be	7d 1a		 jge	 SHORT $LN3@countDays

; 29   : 		if (month > (i + 1)) day += *(amount + i);

  000c0	8b 45 a4	 mov	 eax, DWORD PTR _i$1[ebp]
  000c3	83 c0 01	 add	 eax, 1
  000c6	39 45 f4	 cmp	 DWORD PTR _month$[ebp], eax
  000c9	7e 0d		 jle	 SHORT $LN5@countDays
  000cb	8b 45 a4	 mov	 eax, DWORD PTR _i$1[ebp]
  000ce	8b 4d e8	 mov	 ecx, DWORD PTR _day$[ebp]
  000d1	03 4c 85 b0	 add	 ecx, DWORD PTR _amount$[ebp+eax*4]
  000d5	89 4d e8	 mov	 DWORD PTR _day$[ebp], ecx
$LN5@countDays:
  000d8	eb d7		 jmp	 SHORT $LN2@countDays
$LN3@countDays:

; 30   : 	if ((date % 4 == 0) && (month>2))  day++;

  000da	8b 45 08	 mov	 eax, DWORD PTR _date$[ebp]
  000dd	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  000e2	79 05		 jns	 SHORT $LN11@countDays
  000e4	48		 dec	 eax
  000e5	83 c8 fc	 or	 eax, -4			; fffffffcH
  000e8	40		 inc	 eax
$LN11@countDays:
  000e9	85 c0		 test	 eax, eax
  000eb	75 0f		 jne	 SHORT $LN6@countDays
  000ed	83 7d f4 02	 cmp	 DWORD PTR _month$[ebp], 2
  000f1	7e 09		 jle	 SHORT $LN6@countDays
  000f3	8b 45 e8	 mov	 eax, DWORD PTR _day$[ebp]
  000f6	83 c0 01	 add	 eax, 1
  000f9	89 45 e8	 mov	 DWORD PTR _day$[ebp], eax
$LN6@countDays:

; 31   : 	cout << "Ýòî " << day << " äåíü â " << date % 10000 << " ãîäó";

  000fc	68 00 00 00 00	 push	 OFFSET ??_C@_05IBDPBKGM@?5?c?n?d?s@
  00101	8b 45 08	 mov	 eax, DWORD PTR _date$[ebp]
  00104	99		 cdq
  00105	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  0010a	f7 f9		 idiv	 ecx
  0010c	8b f4		 mov	 esi, esp
  0010e	52		 push	 edx
  0010f	68 00 00 00 00	 push	 OFFSET ??_C@_08HFMLPBIL@?5?d?e?m?$PM?5?b?5@
  00114	8b fc		 mov	 edi, esp
  00116	8b 55 e8	 mov	 edx, DWORD PTR _day$[ebp]
  00119	52		 push	 edx
  0011a	68 00 00 00 00	 push	 OFFSET ??_C@_04FCCPLECO@?$NN?r?n?5@
  0011f	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00124	50		 push	 eax
  00125	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0012a	83 c4 08	 add	 esp, 8
  0012d	8b c8		 mov	 ecx, eax
  0012f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  00135	3b fc		 cmp	 edi, esp
  00137	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0013c	50		 push	 eax
  0013d	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00142	83 c4 08	 add	 esp, 8
  00145	8b c8		 mov	 ecx, eax
  00147	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@H@Z
  0014d	3b f4		 cmp	 esi, esp
  0014f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00154	50		 push	 eax
  00155	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0015a	83 c4 08	 add	 esp, 8

; 32   : 	return day;

  0015d	8b 45 e8	 mov	 eax, DWORD PTR _day$[ebp]

; 33   : }

  00160	52		 push	 edx
  00161	8b cd		 mov	 ecx, ebp
  00163	50		 push	 eax
  00164	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@countDays
  0016a	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0016f	58		 pop	 eax
  00170	5a		 pop	 edx
  00171	5f		 pop	 edi
  00172	5e		 pop	 esi
  00173	5b		 pop	 ebx
  00174	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00177	33 cd		 xor	 ecx, ebp
  00179	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0017e	81 c4 20 01 00
	00		 add	 esp, 288		; 00000120H
  00184	3b ec		 cmp	 ebp, esp
  00186	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0018b	8b e5		 mov	 esp, ebp
  0018d	5d		 pop	 ebp
  0018e	c3		 ret	 0
  0018f	90		 npad	 1
$LN10@countDays:
  00190	01 00 00 00	 DD	 1
  00194	00 00 00 00	 DD	 $LN9@countDays
$LN9@countDays:
  00198	b0 ff ff ff	 DD	 -80			; ffffffb0H
  0019c	30 00 00 00	 DD	 48			; 00000030H
  001a0	00 00 00 00	 DD	 $LN8@countDays
$LN8@countDays:
  001a4	61		 DB	 97			; 00000061H
  001a5	6d		 DB	 109			; 0000006dH
  001a6	6f		 DB	 111			; 0000006fH
  001a7	75		 DB	 117			; 00000075H
  001a8	6e		 DB	 110			; 0000006eH
  001a9	74		 DB	 116			; 00000074H
  001aa	00		 DB	 0
?countDays@@YAHH@Z ENDP					; countDays
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.24.28314\include\ostream
;	COMDAT ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Ostr$ = 8						; size = 4
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z PROC ; std::endl<char,std::char_traits<char> >, COMDAT

; 943  :     basic_ostream<_Elem, _Traits>& _Ostr) { // insert newline and flush stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __094A72D0_ostream
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 944  :     _Ostr.put(_Ostr.widen('\n'));

  00028	8b f4		 mov	 esi, esp
  0002a	6a 0a		 push	 10			; 0000000aH
  0002c	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0002f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00031	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00034	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00037	8b ca		 mov	 ecx, edx
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  0003f	3b f4		 cmp	 esi, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	8b f4		 mov	 esi, esp
  00048	0f b6 c0	 movzx	 eax, al
  0004b	50		 push	 eax
  0004c	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0004f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@D@Z
  00055	3b f4		 cmp	 esi, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 945  :     _Ostr.flush();

  0005c	8b f4		 mov	 esi, esp
  0005e	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
  00067	3b f4		 cmp	 esi, esp
  00069	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 946  :     return _Ostr;

  0006e	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]

; 947  : }

  00071	5f		 pop	 edi
  00072	5e		 pop	 esi
  00073	5b		 pop	 ebx
  00074	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0007a	3b ec		 cmp	 ebp, esp
  0007c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00081	8b e5		 mov	 esp, ebp
  00083	5d		 pop	 ebp
  00084	c3		 ret	 0
??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ENDP ; std::endl<char,std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.24.28314\include\ostream
;	COMDAT ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
_TEXT	SEGMENT
tv135 = -356						; size = 8
tv343 = -348						; size = 8
tv291 = -344						; size = 4
tv288 = -344						; size = 8
tv286 = -344						; size = 4
tv329 = -340						; size = 8
tv290 = -340						; size = 4
tv285 = -340						; size = 4
tv287 = -336						; size = 4
tv137 = -336						; size = 4
tv289 = -333						; size = 1
tv284 = -333						; size = 1
$T2 = -328						; size = 4
$T3 = -316						; size = 4
$T4 = -304						; size = 4
$T5 = -292						; size = 4
$T6 = -280						; size = 4
__Ok$ = -76						; size = 8
__Pad$ = -60						; size = 8
__Count$ = -44						; size = 8
__State$ = -28						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
__Ostr$ = 8						; size = 4
__Val$ = 12						; size = 4
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z PROC ; std::operator<<<std::char_traits<char> >, COMDAT

; 731  :     const char* _Val) { // insert NTBS into char stream

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	51		 push	 ecx
  00012	81 ec 54 01 00
	00		 sub	 esp, 340		; 00000154H
  00018	53		 push	 ebx
  00019	56		 push	 esi
  0001a	57		 push	 edi
  0001b	8d bd 9c fe ff
	ff		 lea	 edi, DWORD PTR [ebp-356]
  00021	b9 55 00 00 00	 mov	 ecx, 85			; 00000055H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00032	33 c5		 xor	 eax, ebp
  00034	89 45 ec	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00037	50		 push	 eax
  00038	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp+4]
  0003b	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00041	89 65 f0	 mov	 DWORD PTR __$EHRec$[ebp], esp
  00044	b9 00 00 00 00	 mov	 ecx, OFFSET __094A72D0_ostream
  00049	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 732  :     using _Elem = char;
; 733  :     using _Myos = basic_ostream<_Elem, _Traits>;
; 734  : 
; 735  :     ios_base::iostate _State = ios_base::goodbit;

  0004e	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR __State$[ebp], 0

; 736  :     streamsize _Count        = static_cast<streamsize>(_Traits::length(_Val));

  00055	8b 45 0c	 mov	 eax, DWORD PTR __Val$[ebp]
  00058	50		 push	 eax
  00059	e8 00 00 00 00	 call	 ?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ; std::_Narrow_char_traits<char,int>::length
  0005e	83 c4 04	 add	 esp, 4
  00061	33 c9		 xor	 ecx, ecx
  00063	89 45 d4	 mov	 DWORD PTR __Count$[ebp], eax
  00066	89 4d d8	 mov	 DWORD PTR __Count$[ebp+4], ecx

; 737  :     streamsize _Pad          = _Ostr.width() <= 0 || _Ostr.width() <= _Count ? 0 : _Ostr.width() - _Count;

  00069	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0006c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006e	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00071	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00074	8b f4		 mov	 esi, esp
  00076	8b ca		 mov	 ecx, edx
  00078	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  0007e	3b f4		 cmp	 esi, esp
  00080	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00085	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv329[ebp], eax
  0008b	89 95 b0 fe ff
	ff		 mov	 DWORD PTR tv329[ebp+4], edx
  00091	83 bd b0 fe ff
	ff 00		 cmp	 DWORD PTR tv329[ebp+4], 0
  00098	7c 79		 jl	 SHORT $LN17@operator
  0009a	7f 09		 jg	 SHORT $LN24@operator
  0009c	83 bd ac fe ff
	ff 00		 cmp	 DWORD PTR tv329[ebp], 0
  000a3	76 6e		 jbe	 SHORT $LN17@operator
$LN24@operator:
  000a5	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  000a8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000aa	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000ad	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  000b0	8b f4		 mov	 esi, esp
  000b2	8b ca		 mov	 ecx, edx
  000b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000ba	3b f4		 cmp	 esi, esp
  000bc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c1	89 85 a4 fe ff
	ff		 mov	 DWORD PTR tv343[ebp], eax
  000c7	89 95 a8 fe ff
	ff		 mov	 DWORD PTR tv343[ebp+4], edx
  000cd	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR tv343[ebp+4]
  000d3	3b 45 d8	 cmp	 eax, DWORD PTR __Count$[ebp+4]
  000d6	7c 3b		 jl	 SHORT $LN17@operator
  000d8	7f 0b		 jg	 SHORT $LN25@operator
  000da	8b 8d a4 fe ff
	ff		 mov	 ecx, DWORD PTR tv343[ebp]
  000e0	3b 4d d4	 cmp	 ecx, DWORD PTR __Count$[ebp]
  000e3	76 2e		 jbe	 SHORT $LN17@operator
$LN25@operator:
  000e5	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  000e8	8b 02		 mov	 eax, DWORD PTR [edx]
  000ea	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  000ed	03 48 04	 add	 ecx, DWORD PTR [eax+4]
  000f0	8b f4		 mov	 esi, esp
  000f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QBE_JXZ
  000f8	3b f4		 cmp	 esi, esp
  000fa	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ff	2b 45 d4	 sub	 eax, DWORD PTR __Count$[ebp]
  00102	1b 55 d8	 sbb	 edx, DWORD PTR __Count$[ebp+4]
  00105	89 85 9c fe ff
	ff		 mov	 DWORD PTR tv135[ebp], eax
  0010b	89 95 a0 fe ff
	ff		 mov	 DWORD PTR tv135[ebp+4], edx
  00111	eb 0b		 jmp	 SHORT $LN18@operator
$LN17@operator:
  00113	0f 57 c0	 xorps	 xmm0, xmm0
  00116	66 0f 13 85 9c
	fe ff ff	 movlpd	 QWORD PTR tv135[ebp], xmm0
$LN18@operator:
  0011e	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR tv135[ebp]
  00124	89 4d c4	 mov	 DWORD PTR __Pad$[ebp], ecx
  00127	8b 95 a0 fe ff
	ff		 mov	 edx, DWORD PTR tv135[ebp+4]
  0012d	89 55 c8	 mov	 DWORD PTR __Pad$[ebp+4], edx

; 738  :     const typename _Myos::sentry _Ok(_Ostr);

  00130	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00133	50		 push	 eax
  00134	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00137	e8 00 00 00 00	 call	 ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z ; std::basic_ostream<char,std::char_traits<char> >::sentry::sentry
  0013c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0

; 739  : 
; 740  :     if (!_Ok) {

  00143	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00146	e8 00 00 00 00	 call	 ??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::operator bool
  0014b	0f b6 c0	 movzx	 eax, al
  0014e	85 c0		 test	 eax, eax
  00150	75 0e		 jne	 SHORT $LN8@operator

; 741  :         _State |= ios_base::badbit;

  00152	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00155	83 c8 04	 or	 eax, 4
  00158	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 742  :     } else { // state okay, insert

  0015b	e9 ba 02 00 00	 jmp	 $LN9@operator
$LN8@operator:

; 743  :         _TRY_IO_BEGIN

  00160	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+12], 1

; 744  :         if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left) {

  00164	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00167	8b 08		 mov	 ecx, DWORD PTR [eax]
  00169	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0016c	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  0016f	8b f4		 mov	 esi, esp
  00171	8b ca		 mov	 ecx, edx
  00173	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?flags@ios_base@std@@QBEHXZ
  00179	3b f4		 cmp	 esi, esp
  0017b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00180	89 85 b0 fe ff
	ff		 mov	 DWORD PTR tv137[ebp], eax
  00186	8b 85 b0 fe ff
	ff		 mov	 eax, DWORD PTR tv137[ebp]
  0018c	25 c0 01 00 00	 and	 eax, 448		; 000001c0H
  00191	83 f8 40	 cmp	 eax, 64			; 00000040H
  00194	0f 84 d5 00 00
	00		 je	 $LN11@operator

; 745  :             for (; 0 < _Pad; --_Pad) { // pad on left

  0019a	eb 12		 jmp	 SHORT $LN4@operator
$LN2@operator:
  0019c	8b 45 c4	 mov	 eax, DWORD PTR __Pad$[ebp]
  0019f	83 e8 01	 sub	 eax, 1
  001a2	8b 4d c8	 mov	 ecx, DWORD PTR __Pad$[ebp+4]
  001a5	83 d9 00	 sbb	 ecx, 0
  001a8	89 45 c4	 mov	 DWORD PTR __Pad$[ebp], eax
  001ab	89 4d c8	 mov	 DWORD PTR __Pad$[ebp+4], ecx
$LN4@operator:
  001ae	83 7d c8 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  001b2	0f 8c b7 00 00
	00		 jl	 $LN11@operator
  001b8	7f 0a		 jg	 SHORT $LN26@operator
  001ba	83 7d c4 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  001be	0f 86 ab 00 00
	00		 jbe	 $LN11@operator
$LN26@operator:

; 746  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  001c4	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  001c7	8b 08		 mov	 ecx, DWORD PTR [eax]
  001c9	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  001cc	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001cf	8b f4		 mov	 esi, esp
  001d1	8b ca		 mov	 ecx, edx
  001d3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  001d9	3b f4		 cmp	 esi, esp
  001db	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001e0	88 85 b3 fe ff
	ff		 mov	 BYTE PTR tv284[ebp], al
  001e6	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  001e9	8b 08		 mov	 ecx, DWORD PTR [eax]
  001eb	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  001ee	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  001f1	8b f4		 mov	 esi, esp
  001f3	8b ca		 mov	 ecx, edx
  001f5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  001fb	3b f4		 cmp	 esi, esp
  001fd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00202	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv285[ebp], eax
  00208	8b f4		 mov	 esi, esp
  0020a	0f b6 85 b3 fe
	ff ff		 movzx	 eax, BYTE PTR tv284[ebp]
  00211	50		 push	 eax
  00212	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv285[ebp]
  00218	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  0021e	3b f4		 cmp	 esi, esp
  00220	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00225	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv286[ebp], eax
  0022b	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR tv286[ebp]
  00231	89 8d e8 fe ff
	ff		 mov	 DWORD PTR $T6[ebp], ecx
  00237	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  0023c	89 85 dc fe ff
	ff		 mov	 DWORD PTR $T5[ebp], eax
  00242	8d 95 e8 fe ff
	ff		 lea	 edx, DWORD PTR $T6[ebp]
  00248	52		 push	 edx
  00249	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  0024f	50		 push	 eax
  00250	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  00255	83 c4 08	 add	 esp, 8
  00258	0f b6 c8	 movzx	 ecx, al
  0025b	85 c9		 test	 ecx, ecx
  0025d	74 0b		 je	 SHORT $LN12@operator

; 747  :                     _State |= ios_base::badbit; // insertion failed, quit

  0025f	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00262	83 c8 04	 or	 eax, 4
  00265	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 748  :                     break;

  00268	eb 05		 jmp	 SHORT $LN11@operator
$LN12@operator:

; 749  :                 }
; 750  :             }

  0026a	e9 2d ff ff ff	 jmp	 $LN2@operator
$LN11@operator:

; 751  :         }
; 752  : 
; 753  :         if (_State == ios_base::goodbit && _Ostr.rdbuf()->sputn(_Val, _Count) != _Count) {

  0026f	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  00273	75 6e		 jne	 SHORT $LN13@operator
  00275	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  00278	8b 08		 mov	 ecx, DWORD PTR [eax]
  0027a	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0027d	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00280	8b f4		 mov	 esi, esp
  00282	8b ca		 mov	 ecx, edx
  00284	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0028a	3b f4		 cmp	 esi, esp
  0028c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00291	89 85 b0 fe ff
	ff		 mov	 DWORD PTR tv287[ebp], eax
  00297	8b f4		 mov	 esi, esp
  00299	8b 45 d8	 mov	 eax, DWORD PTR __Count$[ebp+4]
  0029c	50		 push	 eax
  0029d	8b 4d d4	 mov	 ecx, DWORD PTR __Count$[ebp]
  002a0	51		 push	 ecx
  002a1	8b 55 0c	 mov	 edx, DWORD PTR __Val$[ebp]
  002a4	52		 push	 edx
  002a5	8b 8d b0 fe ff
	ff		 mov	 ecx, DWORD PTR tv287[ebp]
  002ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE_JPBD_J@Z
  002b1	3b f4		 cmp	 esi, esp
  002b3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002b8	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv288[ebp], eax
  002be	89 95 ac fe ff
	ff		 mov	 DWORD PTR tv288[ebp+4], edx
  002c4	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR tv288[ebp]
  002ca	3b 45 d4	 cmp	 eax, DWORD PTR __Count$[ebp]
  002cd	75 0b		 jne	 SHORT $LN27@operator
  002cf	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv288[ebp+4]
  002d5	3b 4d d8	 cmp	 ecx, DWORD PTR __Count$[ebp+4]
  002d8	74 09		 je	 SHORT $LN13@operator
$LN27@operator:

; 754  :             _State |= ios_base::badbit;

  002da	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  002dd	83 c8 04	 or	 eax, 4
  002e0	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax
$LN13@operator:

; 755  :         }
; 756  : 
; 757  :         if (_State == ios_base::goodbit) {

  002e3	83 7d e4 00	 cmp	 DWORD PTR __State$[ebp], 0
  002e7	0f 85 d5 00 00
	00		 jne	 $LN14@operator

; 758  :             for (; 0 < _Pad; --_Pad) { // pad on right

  002ed	eb 12		 jmp	 SHORT $LN7@operator
$LN5@operator:
  002ef	8b 45 c4	 mov	 eax, DWORD PTR __Pad$[ebp]
  002f2	83 e8 01	 sub	 eax, 1
  002f5	8b 4d c8	 mov	 ecx, DWORD PTR __Pad$[ebp+4]
  002f8	83 d9 00	 sbb	 ecx, 0
  002fb	89 45 c4	 mov	 DWORD PTR __Pad$[ebp], eax
  002fe	89 4d c8	 mov	 DWORD PTR __Pad$[ebp+4], ecx
$LN7@operator:
  00301	83 7d c8 00	 cmp	 DWORD PTR __Pad$[ebp+4], 0
  00305	0f 8c b7 00 00
	00		 jl	 $LN14@operator
  0030b	7f 0a		 jg	 SHORT $LN28@operator
  0030d	83 7d c4 00	 cmp	 DWORD PTR __Pad$[ebp], 0
  00311	0f 86 ab 00 00
	00		 jbe	 $LN14@operator
$LN28@operator:

; 759  :                 if (_Traits::eq_int_type(_Traits::eof(), _Ostr.rdbuf()->sputc(_Ostr.fill()))) {

  00317	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0031a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0031c	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  0031f	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00322	8b f4		 mov	 esi, esp
  00324	8b ca		 mov	 ecx, edx
  00326	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDXZ
  0032c	3b f4		 cmp	 esi, esp
  0032e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00333	88 85 b3 fe ff
	ff		 mov	 BYTE PTR tv289[ebp], al
  00339	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0033c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0033e	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  00341	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  00344	8b f4		 mov	 esi, esp
  00346	8b ca		 mov	 ecx, edx
  00348	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ
  0034e	3b f4		 cmp	 esi, esp
  00350	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00355	89 85 ac fe ff
	ff		 mov	 DWORD PTR tv290[ebp], eax
  0035b	8b f4		 mov	 esi, esp
  0035d	0f b6 85 b3 fe
	ff ff		 movzx	 eax, BYTE PTR tv289[ebp]
  00364	50		 push	 eax
  00365	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR tv290[ebp]
  0036b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHD@Z
  00371	3b f4		 cmp	 esi, esp
  00373	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00378	89 85 a8 fe ff
	ff		 mov	 DWORD PTR tv291[ebp], eax
  0037e	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR tv291[ebp]
  00384	89 8d d0 fe ff
	ff		 mov	 DWORD PTR $T4[ebp], ecx
  0038a	e8 00 00 00 00	 call	 ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ; std::_Narrow_char_traits<char,int>::eof
  0038f	89 85 c4 fe ff
	ff		 mov	 DWORD PTR $T3[ebp], eax
  00395	8d 95 d0 fe ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  0039b	52		 push	 edx
  0039c	8d 85 c4 fe ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  003a2	50		 push	 eax
  003a3	e8 00 00 00 00	 call	 ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ; std::_Narrow_char_traits<char,int>::eq_int_type
  003a8	83 c4 08	 add	 esp, 8
  003ab	0f b6 c8	 movzx	 ecx, al
  003ae	85 c9		 test	 ecx, ecx
  003b0	74 0b		 je	 SHORT $LN15@operator

; 760  :                     _State |= ios_base::badbit; // insertion failed, quit

  003b2	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  003b5	83 c8 04	 or	 eax, 4
  003b8	89 45 e4	 mov	 DWORD PTR __State$[ebp], eax

; 761  :                     break;

  003bb	eb 05		 jmp	 SHORT $LN14@operator
$LN15@operator:

; 762  :                 }
; 763  :             }

  003bd	e9 2d ff ff ff	 jmp	 $LN5@operator
$LN14@operator:

; 764  :         }
; 765  : 
; 766  :         _Ostr.width(0);

  003c2	8b f4		 mov	 esi, esp
  003c4	6a 00		 push	 0
  003c6	6a 00		 push	 0
  003c8	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003cb	8b 08		 mov	 ecx, DWORD PTR [eax]
  003cd	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  003d0	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  003d3	8b ca		 mov	 ecx, edx
  003d5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?width@ios_base@std@@QAE_J_J@Z
  003db	3b f4		 cmp	 esi, esp
  003dd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003e2	eb 26		 jmp	 SHORT $LN19@operator
__catch$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$0:

; 767  :         _CATCH_IO_(ios_base, _Ostr)

  003e4	8b f4		 mov	 esi, esp
  003e6	6a 01		 push	 1
  003e8	6a 04		 push	 4
  003ea	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  003ed	8b 08		 mov	 ecx, DWORD PTR [eax]
  003ef	8b 55 08	 mov	 edx, DWORD PTR __Ostr$[ebp]
  003f2	03 51 04	 add	 edx, DWORD PTR [ecx+4]
  003f5	8b ca		 mov	 ecx, edx
  003f7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  003fd	3b f4		 cmp	 esi, esp
  003ff	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00404	b8 00 00 00 00	 mov	 eax, $LN23@operator
  00409	c3		 ret	 0
$LN19@operator:
  0040a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
  00411	eb 07		 jmp	 SHORT $LN9@operator
$LN23@operator:
  00413	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+12], 0
$LN9@operator:

; 768  :     }
; 769  : 
; 770  :     _Ostr.setstate(_State);

  0041a	8b f4		 mov	 esi, esp
  0041c	6a 00		 push	 0
  0041e	8b 45 e4	 mov	 eax, DWORD PTR __State$[ebp]
  00421	50		 push	 eax
  00422	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  00425	8b 11		 mov	 edx, DWORD PTR [ecx]
  00427	8b 4d 08	 mov	 ecx, DWORD PTR __Ostr$[ebp]
  0042a	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0042d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z
  00433	3b f4		 cmp	 esi, esp
  00435	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 771  :     return _Ostr;

  0043a	8b 45 08	 mov	 eax, DWORD PTR __Ostr$[ebp]
  0043d	89 85 b8 fe ff
	ff		 mov	 DWORD PTR $T2[ebp], eax
  00443	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+12], -1
  0044a	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  0044d	e8 00 00 00 00	 call	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
  00452	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR $T2[ebp]

; 772  : }

  00458	52		 push	 edx
  00459	8b cd		 mov	 ecx, ebp
  0045b	50		 push	 eax
  0045c	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN32@operator
  00462	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00467	58		 pop	 eax
  00468	5a		 pop	 edx
  00469	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp+4]
  0046c	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00473	59		 pop	 ecx
  00474	5f		 pop	 edi
  00475	5e		 pop	 esi
  00476	5b		 pop	 ebx
  00477	8b 4d ec	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0047a	33 cd		 xor	 ecx, ebp
  0047c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00481	81 c4 64 01 00
	00		 add	 esp, 356		; 00000164H
  00487	3b ec		 cmp	 ebp, esp
  00489	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0048e	8b e5		 mov	 esp, ebp
  00490	5d		 pop	 ebp
  00491	c3		 ret	 0
  00492	66 90		 npad	 2
$LN32@operator:
  00494	01 00 00 00	 DD	 1
  00498	00 00 00 00	 DD	 $LN31@operator
$LN31@operator:
  0049c	b4 ff ff ff	 DD	 -76			; ffffffb4H
  004a0	08 00 00 00	 DD	 8
  004a4	00 00 00 00	 DD	 $LN29@operator
$LN29@operator:
  004a8	5f		 DB	 95			; 0000005fH
  004a9	4f		 DB	 79			; 0000004fH
  004aa	6b		 DB	 107			; 0000006bH
  004ab	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z$2:
  00000	8d 4d b4	 lea	 ecx, DWORD PTR __Ok$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ ; std::basic_ostream<char,std::char_traits<char> >::sentry::~sentry
__ehhandler$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z:
  00008	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0000c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0000f	8b 8a 98 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-360]
  00015	33 c8		 xor	 ecx, eax
  00017	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0001c	8b 4a f8	 mov	 ecx, DWORD PTR [edx-8]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z
  0002b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ENDP ; std::operator<<<std::char_traits<char> >
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\User\Documents\ßÏ\LP_Lab01\LP_Lab01\Lab01.cpp
;	COMDAT ?correct@@YA_NH@Z
_TEXT	SEGMENT
_ifl$1 = -101						; size = 1
_month$ = -92						; size = 4
_day$ = -80						; size = 4
_amount$ = -68						; size = 48
_correct$ = -9						; size = 1
__$ArrayPad$ = -4					; size = 4
_date$ = 8						; size = 4
?correct@@YA_NH@Z PROC					; correct, COMDAT

; 8    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 2c 01 00
	00		 sub	 esp, 300		; 0000012cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd d4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-300]
  00012	b9 4b 00 00 00	 mov	 ecx, 75			; 0000004bH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __C6F64F3D_Lab01@cpp
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 9    : 	bool correct=true;

  00032	c6 45 f7 01	 mov	 BYTE PTR _correct$[ebp], 1

; 10   : 	int amount[12] = { 31,28,31,30,31,30,31,31,30,31,30 };

  00036	c7 45 bc 1f 00
	00 00		 mov	 DWORD PTR _amount$[ebp], 31 ; 0000001fH
  0003d	c7 45 c0 1c 00
	00 00		 mov	 DWORD PTR _amount$[ebp+4], 28 ; 0000001cH
  00044	c7 45 c4 1f 00
	00 00		 mov	 DWORD PTR _amount$[ebp+8], 31 ; 0000001fH
  0004b	c7 45 c8 1e 00
	00 00		 mov	 DWORD PTR _amount$[ebp+12], 30 ; 0000001eH
  00052	c7 45 cc 1f 00
	00 00		 mov	 DWORD PTR _amount$[ebp+16], 31 ; 0000001fH
  00059	c7 45 d0 1e 00
	00 00		 mov	 DWORD PTR _amount$[ebp+20], 30 ; 0000001eH
  00060	c7 45 d4 1f 00
	00 00		 mov	 DWORD PTR _amount$[ebp+24], 31 ; 0000001fH
  00067	c7 45 d8 1f 00
	00 00		 mov	 DWORD PTR _amount$[ebp+28], 31 ; 0000001fH
  0006e	c7 45 dc 1e 00
	00 00		 mov	 DWORD PTR _amount$[ebp+32], 30 ; 0000001eH
  00075	c7 45 e0 1f 00
	00 00		 mov	 DWORD PTR _amount$[ebp+36], 31 ; 0000001fH
  0007c	c7 45 e4 1e 00
	00 00		 mov	 DWORD PTR _amount$[ebp+40], 30 ; 0000001eH
  00083	33 c0		 xor	 eax, eax
  00085	89 45 e8	 mov	 DWORD PTR _amount$[ebp+44], eax

; 11   : 	int day = date / 1000000;

  00088	8b 45 08	 mov	 eax, DWORD PTR _date$[ebp]
  0008b	99		 cdq
  0008c	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  00091	f7 f9		 idiv	 ecx
  00093	89 45 b0	 mov	 DWORD PTR _day$[ebp], eax

; 12   : 	int month = (date / 10000) % 100;

  00096	8b 45 08	 mov	 eax, DWORD PTR _date$[ebp]
  00099	99		 cdq
  0009a	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  0009f	f7 f9		 idiv	 ecx
  000a1	99		 cdq
  000a2	b9 64 00 00 00	 mov	 ecx, 100		; 00000064H
  000a7	f7 f9		 idiv	 ecx
  000a9	89 55 a4	 mov	 DWORD PTR _month$[ebp], edx

; 13   : 	if ((date < 1000000)||(date>=100000000)) { cout << "äàííûå ââåäåíû íå ñîãëàñíî ôîðìàòó" << endl; correct = false; }

  000ac	81 7d 08 40 42
	0f 00		 cmp	 DWORD PTR _date$[ebp], 1000000 ; 000f4240H
  000b3	7c 09		 jl	 SHORT $LN4@correct
  000b5	81 7d 08 00 e1
	f5 05		 cmp	 DWORD PTR _date$[ebp], 100000000 ; 05f5e100H
  000bc	7c 32		 jl	 SHORT $LN2@correct
$LN4@correct:
  000be	8b f4		 mov	 esi, esp
  000c0	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  000c5	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@GCNIAHMP@?d?$OA?m?m?$PL?e?5?b?b?e?d?e?m?$PL?5?m?e?5?q?n?c?k?$OA?q?m?n?5?t?n?p?l@
  000ca	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  000cf	50		 push	 eax
  000d0	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  000d5	83 c4 08	 add	 esp, 8
  000d8	8b c8		 mov	 ecx, eax
  000da	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  000e0	3b f4		 cmp	 esi, esp
  000e2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e7	c6 45 f7 00	 mov	 BYTE PTR _correct$[ebp], 0
  000eb	e9 eb 00 00 00	 jmp	 $LN3@correct
$LN2@correct:

; 14   : 	else
; 15   : 	{
; 16   : 		if ((((date % 1000000) / 10000) > 12) || (((date % 1000000) / 10000) < 1)) { cout << "ìåñÿö ââåäåí íåâåðíî" << endl; correct = false; }

  000f0	8b 45 08	 mov	 eax, DWORD PTR _date$[ebp]
  000f3	99		 cdq
  000f4	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  000f9	f7 f9		 idiv	 ecx
  000fb	8b c2		 mov	 eax, edx
  000fd	99		 cdq
  000fe	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  00103	f7 f9		 idiv	 ecx
  00105	83 f8 0c	 cmp	 eax, 12			; 0000000cH
  00108	7f 1a		 jg	 SHORT $LN6@correct
  0010a	8b 45 08	 mov	 eax, DWORD PTR _date$[ebp]
  0010d	99		 cdq
  0010e	b9 40 42 0f 00	 mov	 ecx, 1000000		; 000f4240H
  00113	f7 f9		 idiv	 ecx
  00115	8b c2		 mov	 eax, edx
  00117	99		 cdq
  00118	b9 10 27 00 00	 mov	 ecx, 10000		; 00002710H
  0011d	f7 f9		 idiv	 ecx
  0011f	83 f8 01	 cmp	 eax, 1
  00122	7d 2d		 jge	 SHORT $LN5@correct
$LN6@correct:
  00124	8b f4		 mov	 esi, esp
  00126	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0012b	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@MMGGFLJJ@?l?e?q?$PP?v?5?b?b?e?d?e?m?5?m?e?b?e?p?m?n@
  00130	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00135	50		 push	 eax
  00136	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0013b	83 c4 08	 add	 esp, 8
  0013e	8b c8		 mov	 ecx, eax
  00140	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00146	3b f4		 cmp	 esi, esp
  00148	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0014d	c6 45 f7 00	 mov	 BYTE PTR _correct$[ebp], 0
$LN5@correct:

; 17   : 		bool ifl=ifleap(date);

  00151	8b 45 08	 mov	 eax, DWORD PTR _date$[ebp]
  00154	50		 push	 eax
  00155	e8 00 00 00 00	 call	 ?ifleap@@YA_NH@Z	; ifleap
  0015a	83 c4 04	 add	 esp, 4
  0015d	88 45 9b	 mov	 BYTE PTR _ifl$1[ebp], al

; 18   : 		if ((ifl == true) && (month == 2) && (day > 28)) { cout << "äåíü ââåäåí íåâåðíî, ãîä âèñîêîñíûé" << endl; correct = false; }

  00160	0f b6 45 9b	 movzx	 eax, BYTE PTR _ifl$1[ebp]
  00164	83 f8 01	 cmp	 eax, 1
  00167	75 39		 jne	 SHORT $LN7@correct
  00169	83 7d a4 02	 cmp	 DWORD PTR _month$[ebp], 2
  0016d	75 33		 jne	 SHORT $LN7@correct
  0016f	83 7d b0 1c	 cmp	 DWORD PTR _day$[ebp], 28 ; 0000001cH
  00173	7e 2d		 jle	 SHORT $LN7@correct
  00175	8b f4		 mov	 esi, esp
  00177	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  0017c	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@JEGLBJDM@?d?e?m?$PM?5?b?b?e?d?e?m?5?m?e?b?e?p?m?n?0?5?c?n?d?5?b?h?q?n?j?n@
  00181	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  00186	50		 push	 eax
  00187	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  0018c	83 c4 08	 add	 esp, 8
  0018f	8b c8		 mov	 ecx, eax
  00191	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  00197	3b f4		 cmp	 esi, esp
  00199	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0019e	c6 45 f7 00	 mov	 BYTE PTR _correct$[ebp], 0
$LN7@correct:

; 19   : 		if (day > amount[month - 1]) { cout << "äåíü ââåäåí íåâåðíî, â äàííîì ìåñÿöå ìåíüøå äíåé" << endl; correct = false; }

  001a2	8b 45 a4	 mov	 eax, DWORD PTR _month$[ebp]
  001a5	8b 4d b0	 mov	 ecx, DWORD PTR _day$[ebp]
  001a8	3b 4c 85 b8	 cmp	 ecx, DWORD PTR _amount$[ebp+eax*4-4]
  001ac	7e 2d		 jle	 SHORT $LN3@correct
  001ae	8b f4		 mov	 esi, esp
  001b0	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  001b5	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@CHKHDBKP@?d?e?m?$PM?5?b?b?e?d?e?m?5?m?e?b?e?p?m?n?0?5?b?5?d?$OA?m?m?n?l?5?l@
  001ba	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  001bf	50		 push	 eax
  001c0	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  001c5	83 c4 08	 add	 esp, 8
  001c8	8b c8		 mov	 ecx, eax
  001ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  001d0	3b f4		 cmp	 esi, esp
  001d2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001d7	c6 45 f7 00	 mov	 BYTE PTR _correct$[ebp], 0
$LN3@correct:

; 20   : 	}
; 21   : 	return correct;

  001db	8a 45 f7	 mov	 al, BYTE PTR _correct$[ebp]

; 22   : }

  001de	52		 push	 edx
  001df	8b cd		 mov	 ecx, ebp
  001e1	50		 push	 eax
  001e2	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN12@correct
  001e8	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001ed	58		 pop	 eax
  001ee	5a		 pop	 edx
  001ef	5f		 pop	 edi
  001f0	5e		 pop	 esi
  001f1	5b		 pop	 ebx
  001f2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001f5	33 cd		 xor	 ecx, ebp
  001f7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001fc	81 c4 2c 01 00
	00		 add	 esp, 300		; 0000012cH
  00202	3b ec		 cmp	 ebp, esp
  00204	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00209	8b e5		 mov	 esp, ebp
  0020b	5d		 pop	 ebp
  0020c	c3		 ret	 0
  0020d	0f 1f 00	 npad	 3
$LN12@correct:
  00210	01 00 00 00	 DD	 1
  00214	00 00 00 00	 DD	 $LN11@correct
$LN11@correct:
  00218	bc ff ff ff	 DD	 -68			; ffffffbcH
  0021c	30 00 00 00	 DD	 48			; 00000030H
  00220	00 00 00 00	 DD	 $LN10@correct
$LN10@correct:
  00224	61		 DB	 97			; 00000061H
  00225	6d		 DB	 109			; 0000006dH
  00226	6f		 DB	 111			; 0000006fH
  00227	75		 DB	 117			; 00000075H
  00228	6e		 DB	 110			; 0000006eH
  00229	74		 DB	 116			; 00000074H
  0022a	00		 DB	 0
?correct@@YA_NH@Z ENDP					; correct
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\User\Documents\ßÏ\LP_Lab01\LP_Lab01\Lab01.cpp
;	COMDAT ?ifleap@@YA_NH@Z
_TEXT	SEGMENT
_ifl$ = -5						; size = 1
_date$ = 8						; size = 4
?ifleap@@YA_NH@Z PROC					; ifleap, COMDAT

; 35   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __C6F64F3D_Lab01@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 36   : 	bool ifl;
; 37   : 	if (date % 4 == 0) { cout << "ãîä âèñîêîñíûé" << endl; ifl = true; }

  00028	8b 45 08	 mov	 eax, DWORD PTR _date$[ebp]
  0002b	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  00030	79 05		 jns	 SHORT $LN5@ifleap
  00032	48		 dec	 eax
  00033	83 c8 fc	 or	 eax, -4			; fffffffcH
  00036	40		 inc	 eax
$LN5@ifleap:
  00037	85 c0		 test	 eax, eax
  00039	75 2f		 jne	 SHORT $LN2@ifleap
  0003b	8b f4		 mov	 esi, esp
  0003d	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_0P@CHIFFIAL@?c?n?d?5?b?h?q?n?j?n?q?m?$PL?i@
  00047	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0004c	50		 push	 eax
  0004d	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00052	83 c4 08	 add	 esp, 8
  00055	8b c8		 mov	 ecx, eax
  00057	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0005d	3b f4		 cmp	 esi, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00064	c6 45 fb 01	 mov	 BYTE PTR _ifl$[ebp], 1
  00068	eb 2d		 jmp	 SHORT $LN3@ifleap
$LN2@ifleap:

; 38   : 	else {
; 39   : 		cout << "ãîä íå âèñîêîñíûé" << endl; ifl = false;

  0006a	8b f4		 mov	 esi, esp
  0006c	68 00 00 00 00	 push	 OFFSET ??$endl@DU?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@@Z ; std::endl<char,std::char_traits<char> >
  00071	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@DJFNDCHH@?c?n?d?5?m?e?5?b?h?q?n?j?n?q?m?$PL?i@
  00076	a1 00 00 00 00	 mov	 eax, DWORD PTR __imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A
  0007b	50		 push	 eax
  0007c	e8 00 00 00 00	 call	 ??$?6U?$char_traits@D@std@@@std@@YAAAV?$basic_ostream@DU?$char_traits@D@std@@@0@AAV10@PBD@Z ; std::operator<<<std::char_traits<char> >
  00081	83 c4 08	 add	 esp, 8
  00084	8b c8		 mov	 ecx, eax
  00086	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV01@P6AAAV01@AAV01@@Z@Z
  0008c	3b f4		 cmp	 esi, esp
  0008e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00093	c6 45 fb 00	 mov	 BYTE PTR _ifl$[ebp], 0
$LN3@ifleap:

; 40   : 	}
; 41   : 	return ifl;

  00097	8a 45 fb	 mov	 al, BYTE PTR _ifl$[ebp]

; 42   : }

  0009a	5f		 pop	 edi
  0009b	5e		 pop	 esi
  0009c	5b		 pop	 ebx
  0009d	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  000a3	3b ec		 cmp	 ebp, esp
  000a5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c3		 ret	 0
?ifleap@@YA_NH@Z ENDP					; ifleap
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.24.28314\include\xstring
;	COMDAT ?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ PROC		; std::_Narrow_char_traits<char,int>::eof, COMDAT

; 404  :     _NODISCARD static constexpr int_type eof() noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00020	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	50		 push	 eax
  00034	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00037	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003d	b9 00 00 00 00	 mov	 ecx, OFFSET __C564DC25_xstring
  00042	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 405  :         return static_cast<int_type>(EOF);

  00047	83 c8 ff	 or	 eax, -1

; 406  :     }

  0004a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0004d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00054	59		 pop	 ecx
  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx
  00058	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0005e	3b ec		 cmp	 ebp, esp
  00060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 30 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-208]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?eof@?$_Narrow_char_traits@DH@std@@SAHXZ
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?eof@?$_Narrow_char_traits@DH@std@@SAHXZ ENDP		; std::_Narrow_char_traits<char,int>::eof
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.24.28314\include\xstring
;	COMDAT ?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z
_TEXT	SEGMENT
tv65 = -208						; size = 4
__$EHRec$ = -12						; size = 12
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z PROC ; std::_Narrow_char_traits<char,int>::eq_int_type, COMDAT

; 396  :     _NODISCARD static constexpr bool eq_int_type(const int_type& _Left, const int_type& _Right) noexcept {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00020	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	50		 push	 eax
  00034	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00037	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003d	b9 00 00 00 00	 mov	 ecx, OFFSET __C564DC25_xstring
  00042	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 397  :         return _Left == _Right;

  00047	8b 45 08	 mov	 eax, DWORD PTR __Left$[ebp]
  0004a	8b 4d 0c	 mov	 ecx, DWORD PTR __Right$[ebp]
  0004d	8b 10		 mov	 edx, DWORD PTR [eax]
  0004f	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00051	75 0c		 jne	 SHORT $LN3@eq_int_typ
  00053	c7 85 30 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv65[ebp], 1
  0005d	eb 0a		 jmp	 SHORT $LN4@eq_int_typ
$LN3@eq_int_typ:
  0005f	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv65[ebp], 0
$LN4@eq_int_typ:
  00069	8a 85 30 ff ff
	ff		 mov	 al, BYTE PTR tv65[ebp]

; 398  :     }

  0006f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00072	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00079	59		 pop	 ecx
  0007a	5f		 pop	 edi
  0007b	5e		 pop	 esi
  0007c	5b		 pop	 ebx
  0007d	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  00083	3b ec		 cmp	 ebp, esp
  00085	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008a	8b e5		 mov	 esp, ebp
  0008c	5d		 pop	 ebp
  0008d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 2c ff ff
	ff		 mov	 ecx, DWORD PTR [edx-212]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?eq_int_type@?$_Narrow_char_traits@DH@std@@SA_NABH0@Z ENDP ; std::_Narrow_char_traits<char,int>::eq_int_type
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.24.28314\include\xstring
;	COMDAT ?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
__First$ = 8						; size = 4
?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z PROC	; std::_Narrow_char_traits<char,int>::length, COMDAT

; 309  :     _NODISCARD static _CONSTEXPR17 size_t length(_In_z_ const _Elem* const _First) noexcept /* strengthened */ {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00020	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	50		 push	 eax
  00034	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00037	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003d	b9 00 00 00 00	 mov	 ecx, OFFSET __C564DC25_xstring
  00042	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 310  :         // find length of null-terminated string
; 311  : #if _HAS_CXX17
; 312  : #ifdef __cpp_char8_t
; 313  :         if constexpr (is_same_v<_Elem, char8_t>) {
; 314  : #if _HAS_U8_INTRINSICS
; 315  :             return __builtin_u8strlen(_First);
; 316  : #else // ^^^ use u8 intrinsics / no u8 intrinsics vvv
; 317  :             return _Char_traits<_Elem, _Int_type>::length(_First);
; 318  : #endif // _HAS_U8_INTRINSICS
; 319  :         } else
; 320  : #endif // __cpp_char8_t
; 321  :         {
; 322  :             return __builtin_strlen(_First);
; 323  :         }
; 324  : #else // _HAS_CXX17
; 325  :         return _CSTD strlen(reinterpret_cast<const char*>(_First));

  00047	8b 45 08	 mov	 eax, DWORD PTR __First$[ebp]
  0004a	50		 push	 eax
  0004b	e8 00 00 00 00	 call	 _strlen
  00050	83 c4 04	 add	 esp, 4

; 326  : #endif // _HAS_CXX17
; 327  :     }

  00053	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00056	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0005d	59		 pop	 ecx
  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	5b		 pop	 ebx
  00061	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00067	3b ec		 cmp	 ebp, esp
  00069	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z:
  00000	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00004	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00007	8b 8a 30 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-208]
  0000d	33 c8		 xor	 ecx, eax
  0000f	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00014	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z
  00019	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?length@?$_Narrow_char_traits@DH@std@@SAIQBD@Z ENDP	; std::_Narrow_char_traits<char,int>::length
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\User\Documents\ßÏ\LP_Lab01\LP_Lab01\Lab01.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __C6F64F3D_Lab01@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File C:\Users\User\Documents\ßÏ\LP_Lab01\LP_Lab01\Lab01.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __C6F64F3D_Lab01@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
